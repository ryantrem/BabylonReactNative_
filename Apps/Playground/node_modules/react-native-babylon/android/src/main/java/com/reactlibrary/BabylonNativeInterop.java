package com.reactlibrary;

import android.util.Log;
import android.view.Surface;

import com.babylon.GetJsGlobalContextRef;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactContext;

import java.util.Hashtable;

final class BabylonNativeInterop {
    // JNI interface
    static {
        System.loadLibrary("BabylonNative");
    }

    private static Hashtable<ReactContext, Long> nativeInstances = new Hashtable<>();

    private static native long create(long jsContextRef, Surface surface);
    private static native void refresh(long instanceRef, Surface surface);
    private static native void destroy(long instanceRef);

    static void setView(ReactContext reactContext, Surface surface) {
        Long instanceRef = BabylonNativeInterop.nativeInstances.get(reactContext);
        if (instanceRef == null)
        {
            GetJsGlobalContextRef getJsGlobalContextRef = new GetJsGlobalContextRef();
            long jsContextHandle = reactContext.getJavaScriptContextHolder().get();
            long jsContextRef = getJsGlobalContextRef.GetJsGlobalContextRef(jsContextHandle);

            instanceRef = BabylonNativeInterop.create(jsContextRef, surface);
            BabylonNativeInterop.nativeInstances.put(reactContext, instanceRef);
            final long finalInstanceRef = instanceRef;

            reactContext.addLifecycleEventListener(new LifecycleEventListener() {
                @Override
                public void onHostResume() {
                    Log.i("BabylonNativeInterop", "onHostResume");
                    // TODO: Probably call into native interop to resume (e.g. resume XR/ARCore)
                }

                @Override
                public void onHostPause() {
                    Log.i("BabylonNativeInterop", "onHostPause");
                    // TODO: Probably call into native interop to pause (e.g. resume XR/ARCore)
                }

                @Override
                public void onHostDestroy() {
                    Log.i("BabylonNativeInterop", "onHostDestroy");
                    BabylonNativeInterop.nativeInstances.remove(reactContext);
                    BabylonNativeInterop.destroy(finalInstanceRef);
                }
            });
        } else {
            BabylonNativeInterop.refresh(instanceRef, surface);
        }
    }
}
