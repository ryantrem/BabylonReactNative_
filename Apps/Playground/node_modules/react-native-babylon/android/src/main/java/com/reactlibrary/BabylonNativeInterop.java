package com.reactlibrary;

import android.util.Log;
import android.view.Surface;

import com.babylon.GetJsGlobalContextRef;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactContext;

final class BabylonNativeInterop {
    // JNI interface
    static {
        System.loadLibrary("BabylonNative");
    }

    private static boolean initialized;

    private static native void setView(long jsContextRef, Surface surface);

    static void setView(ReactContext reactContext, Surface surface) {
        GetJsGlobalContextRef getJsGlobalContextRef = new GetJsGlobalContextRef();
        long jsContextHandle = reactContext.getJavaScriptContextHolder().get();
        long jsContextRef = getJsGlobalContextRef.GetJsGlobalContextRef(jsContextHandle);
        setView(jsContextRef, surface);

        if (!BabylonNativeInterop.initialized) {
            reactContext.addLifecycleEventListener(new LifecycleEventListener() {
                @Override
                public void onHostResume() {
                    // TODO: Probably call into native interop to resume (e.g. resume XR/ARCore)
                    Log.i("EngineView", "onHostResume");
                }

                @Override
                public void onHostPause() {
                    // TODO: Probably call into native interop to pause (e.g. resume XR/ARCore)
                    Log.i("EngineView", "onHostPause");
                }

                @Override
                public void onHostDestroy() {
                    // TODO: ?
                    Log.i("EngineView", "onHostDestroy");
                }
            });

            BabylonNativeInterop.initialized = true;
        }
    }
}
