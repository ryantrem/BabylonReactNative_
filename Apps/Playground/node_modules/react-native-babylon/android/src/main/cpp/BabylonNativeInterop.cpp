#include <jni.h>

#include <Babylon/JsRuntime.h>
#include <Babylon/NativeWindow.h>
#include <Babylon/NativeEngine.h>

#include <arcana/threading/task_schedulers.h>

#include <JavaScriptCore/JavaScript.h>

#include <android/log.h>
#include <android/looper.h>
#include <android/native_window.h>
#include <android/native_window_jni.h>

#include <optional>
#include <sstream>
#include <unistd.h>

namespace Babylon
{
    namespace
    {
        void log(const char *str)
        {
            __android_log_print(ANDROID_LOG_VERBOSE, "BabylonNative", "%s", str);
        }

        std::optional<Napi::Env> g_env;

        using looper_scheduler_t = arcana::looper_scheduler<sizeof(std::function<void(Napi::Env)>)>;
        std::unique_ptr<looper_scheduler_t> g_looper_scheduler;
    }

    void SetView(JSGlobalContextRef jsContext, ANativeWindow* windowPtr)
    {
        auto width = static_cast<size_t>(ANativeWindow_getWidth(windowPtr));
        auto height = static_cast<size_t>(ANativeWindow_getHeight(windowPtr));

        if (!g_env)
        {
            Napi::Env env = Napi::Attach(jsContext);
            g_env = env;

            g_looper_scheduler = std::make_unique<looper_scheduler_t>(looper_scheduler_t::get_for_current_thread());

            JsRuntime::DispatchFunctionT dispatchFunction{[](std::function<void(Napi::Env)> func) {
                (*g_looper_scheduler)([func = std::move(func)]() { func(*g_env); });
            }};

            JsRuntime::Initialize(env, dispatchFunction);

            // TODO: Add clean-up code. GSL final?

            dispatchFunction([windowPtr, width, height](Napi::Env env) {
                InitializeNativeEngine(JsRuntime::GetFromJavaScript(env), windowPtr, width, height);
                NativeWindow::Initialize(env, windowPtr, width, height);
            });
        }
        else
        {
            auto& runtime = JsRuntime::GetFromJavaScript(*g_env);
            ReinitializeNativeEngine(runtime, windowPtr, width, height);
        }
    }
}

extern "C" JNIEXPORT void JNICALL Java_com_reactlibrary_BabylonNativeInterop_setView(JNIEnv* env, jclass obj, jlong jsContextRef, jobject surface)
{
    auto jsContext = reinterpret_cast<JSGlobalContextRef>(jsContextRef);
    ANativeWindow* windowPtr = ANativeWindow_fromSurface(env, surface);
    Babylon::SetView(jsContext, windowPtr);
}
