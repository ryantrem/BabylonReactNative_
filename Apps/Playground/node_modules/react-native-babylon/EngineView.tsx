import React, { FunctionComponent, Component, useEffect, useState } from 'react';
import {requireNativeComponent, ViewProps, NativeSyntheticEvent} from 'react-native';
import { Engine, NativeEngine, Camera } from '@babylonjs/core';

interface NativeEngineViewProps extends ViewProps {
}

const NativeEngineView: {
    prototype: Component<NativeEngineViewProps>;
    new(props: Readonly<NativeEngineViewProps>): Component<NativeEngineViewProps>;
} = requireNativeComponent('EngineView');

export interface EngineViewProps extends ViewProps {
    camera?: Camera;
}

export const EngineView: FunctionComponent<EngineViewProps> = (props: EngineViewProps) => {

    useEffect(() => {
        if (props.camera) {
            const engine = props.camera.getScene().getEngine();
            console.log("--- STARTING RENDER LOOP ---");
            engine.runRenderLoop(() => {
                for (let scene of engine.scenes) {
                    scene.render();
                }
            });

            return () => {
                console.log("--- STOPPING RENDER LOOP ---");
                engine.stopRenderLoop();
            };
        }
    }, [props.camera]);

    return (
        <NativeEngineView style={props.style} />
    );
}