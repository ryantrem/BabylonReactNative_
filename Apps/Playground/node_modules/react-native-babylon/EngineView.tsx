import React, { FunctionComponent, Component, useEffect } from 'react';
import {requireNativeComponent, ViewProps, AppState, AppStateStatus} from 'react-native';
import { Camera } from '@babylonjs/core';
import { IsEngineDisposed } from './EngineHelpers';

interface NativeEngineViewProps extends ViewProps {
}

const NativeEngineView: {
    prototype: Component<NativeEngineViewProps>;
    new(props: Readonly<NativeEngineViewProps>): Component<NativeEngineViewProps>;
} = requireNativeComponent('EngineView');

export interface EngineViewProps extends ViewProps {
    camera?: Camera;
}

export const EngineView: FunctionComponent<EngineViewProps> = (props: EngineViewProps) => {
    useEffect(() => {
        console.log("--- EVALUATING STATE CHANGE ---");
        if (props.camera) {
            const engine = props.camera.getScene().getEngine();

            if (!IsEngineDisposed(engine)) {
                const onAppStateChanged = (appState: AppStateStatus) => {
                    if (appState === "active") {
                        console.log("--- STARTING RENDER LOOP ---: " + + (engine as any)["uid"]);
                        engine.runRenderLoop(() => {
                            for (let scene of engine.scenes) {
                                scene.render();
                            }
                        });
                    } else {
                        console.log("--- STOPPING RENDER LOOP (state change) ---: " + + (engine as any)["uid"]);
                        engine.stopRenderLoop();
                    }
                };

                onAppStateChanged(AppState.currentState);
                AppState.addEventListener("change", onAppStateChanged);

                return () => {
                    if (!IsEngineDisposed(engine)) {
                        console.log("--- STOPPING RENDER LOOP (cleanup) ---: " + + (engine as any)["uid"]);
                        engine.stopRenderLoop();
                    }
                    AppState.removeEventListener("change", onAppStateChanged);
                };
            }
        }
    }, [props.camera]);

    return (
        <NativeEngineView style={props.style} />
    );
}